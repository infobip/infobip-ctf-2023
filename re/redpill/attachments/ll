; ModuleID = 'redpill.c'
source_filename = "redpill.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.div_t = type { i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@matrix = dso_local constant [26 x [10 x i8]] [[10 x i8] c"\C1t3\D5\93\F8\06\B5\96\B9", [10 x i8] c"\A6\C7\A1\F2\22IaK\B7\DC", [10 x i8] c",\BF\DF\FDX\AF\0Ah\CE\9F", [10 x i8] c"\0E_\EE\17&\EF\C2|\B4\B8", [10 x i8] c"\1B\D9\E0e\00\94\D27o\04", [10 x i8] c"=\1A\15u\F1\F7*\13\D8k", [10 x i8] c"Hxg.\14\D4E\A3\F35", [10 x i8] c"Wd\D7\A8\BA\D6\83\9E\D0]", [10 x i8] c"\07`9-\B3\BE6\DD\C4\EB", [10 x i8] c"\90\CA\18\8Ec)\CBb\A72", [10 x i8] c"B\\(\95\D3%\AA\9AD\DB", [10 x i8] c"\11i!\BC\B6\BD\7F\AD\8FL", [10 x i8] c"\82F\97\12/\A4\E1\05\10\C0", [10 x i8] c"lz\B1\A0\F4\9C?y{\C9", [10 x i8] c"\0B\E6\9DS\ED\E7j\EC\92C", [10 x i8] c"U\FE\0F^\88\FC\C5O\8B1", [10 x i8] c"\F0T\F5r\DA>\9B\8C'\01", [10 x i8] c"A\86\F9\99\A20\DE\B2\B0\FA", [10 x i8] c"q\80\1E\BBG\91R\AC\84J", [10 x i8] c"<\C6N\81\0D\87+P\8D[", [10 x i8] c"\E9\85\16#sm\CFw\0C\FB", [10 x i8] c"\E3\EAV\08\E58MY \03", [10 x i8] c"\AB\1C:\98\E4Q\C8\AE~\F6", [10 x i8] c"\1F\C3\A5;\FF\E8\8A\09f$", [10 x i8] c"4\D1n\19@\CD\CCpZ}", [10 x i8] c"\1D\E2\02\89\A9v\00\00\00\00"], align 16
@.str = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"red.pill\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"w\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @convert(i8* noundef %0, i8* noundef %1, i32 noundef %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.div_t, align 4
  %9 = alloca %struct.div_t, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %10

10:                                               ; preds = %38, %3
  %11 = load i32, i32* %7, align 4
  %12 = load i32, i32* %6, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %41

14:                                               ; preds = %10
  %15 = load i8*, i8** %4, align 8
  %16 = load i32, i32* %7, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = call i64 @div(i32 noundef %20, i32 noundef 10) #4
  %22 = bitcast %struct.div_t* %9 to i64*
  store i64 %21, i64* %22, align 4
  %23 = bitcast %struct.div_t* %8 to i8*
  %24 = bitcast %struct.div_t* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %24, i64 8, i1 false)
  %25 = getelementptr inbounds %struct.div_t, %struct.div_t* %8, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [26 x [10 x i8]], [26 x [10 x i8]]* @matrix, i64 0, i64 %27
  %29 = getelementptr inbounds %struct.div_t, %struct.div_t* %8, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [10 x i8], [10 x i8]* %28, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = load i8*, i8** %5, align 8
  %35 = load i32, i32* %7, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  store i8 %33, i8* %37, align 1
  br label %38

38:                                               ; preds = %14
  %39 = load i32, i32* %7, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %7, align 4
  br label %10, !llvm.loop !6

41:                                               ; preds = %10
  ret void
}

; Function Attrs: nounwind readnone willreturn
declare i64 @div(i32 noundef, i32 noundef) #1

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @run(i8* noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct._IO_FILE*, align 8
  %5 = alloca [255 x i8], align 16
  %6 = alloca [255 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = call noalias %struct._IO_FILE* @fopen(i8* noundef %9, i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store %struct._IO_FILE* %10, %struct._IO_FILE** %4, align 8
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %12 = icmp eq %struct._IO_FILE* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 1, i32* %2, align 4
  br label %46

14:                                               ; preds = %1
  store i32 0, i32* %7, align 4
  br label %15

15:                                               ; preds = %31, %14
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %17 = call i32 @getc(%struct._IO_FILE* noundef %16)
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %8, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, -1
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = load i32, i32* %7, align 4
  %23 = icmp slt i32 %22, 255
  br label %24

24:                                               ; preds = %21, %15
  %25 = phi i1 [ true, %15 ], [ %23, %21 ]
  br i1 %25, label %26, label %34

26:                                               ; preds = %24
  %27 = load i8, i8* %8, align 1
  %28 = load i32, i32* %7, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 %29
  store i8 %27, i8* %30, align 1
  br label %31

31:                                               ; preds = %26
  %32 = load i32, i32* %7, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %7, align 4
  br label %15, !llvm.loop !8

34:                                               ; preds = %24
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %36 = call i32 @fclose(%struct._IO_FILE* noundef %35)
  %37 = getelementptr inbounds [255 x i8], [255 x i8]* %5, i64 0, i64 0
  %38 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %39 = load i32, i32* %7, align 4
  call void @convert(i8* noundef %37, i8* noundef %38, i32 noundef %39)
  %40 = call noalias %struct._IO_FILE* @fopen(i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8* noundef getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store %struct._IO_FILE* %40, %struct._IO_FILE** %4, align 8
  %41 = getelementptr inbounds [255 x i8], [255 x i8]* %6, i64 0, i64 0
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %43 = call i32 @fputs(i8* noundef %41, %struct._IO_FILE* noundef %42)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %45 = call i32 @fclose(%struct._IO_FILE* noundef %44)
  store i32 0, i32* %2, align 4
  br label %46

46:                                               ; preds = %34, %13
  %47 = load i32, i32* %2, align 4
  ret i32 %47
}

declare noalias %struct._IO_FILE* @fopen(i8* noundef, i8* noundef) #3

declare i32 @getc(%struct._IO_FILE* noundef) #3

declare i32 @fclose(%struct._IO_FILE* noundef) #3

declare i32 @fputs(i8* noundef, %struct._IO_FILE* noundef) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %0, i8** noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %6 = load i32, i32* %4, align 4
  %7 = icmp ne i32 %6, 2
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i32 1, i32* %3, align 4
  br label %14

9:                                                ; preds = %2
  %10 = load i8**, i8*** %5, align 8
  %11 = getelementptr inbounds i8*, i8** %10, i64 1
  %12 = load i8*, i8** %11, align 8
  %13 = call i32 @run(i8* noundef %12)
  store i32 %13, i32* %3, align 4
  br label %14

14:                                               ; preds = %9, %8
  %15 = load i32, i32* %3, align 4
  ret i32 %15
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { argmemonly nofree nounwind willreturn }
attributes #3 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
